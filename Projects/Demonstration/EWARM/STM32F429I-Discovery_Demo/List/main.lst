###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        23/Nov/2014  02:10:44
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\Core\User\main.c
#    Command line =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\Core\User\main.c
#        -D USE_STDPERIPH_DRIVER -D STM32F429_439xx -D USE_STM32F429I_DISCO -D
#        USE_USB_OTG_HS -D USE_EMBEDDED_PHY -lcN
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\
#        --diag_suppress Pe111,Pa082 -o
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\
#        --debug --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Config\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Devices\STM32F4xx\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\User\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Demo\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Lib\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Test_Program\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\HID\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\Audio\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Common\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\STM32F429i-Discovery\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\fat_fs\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\Config\
#        -Ohs --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\main.lst
#    Object file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\main.o
#
###############################################################################

C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\Core\User\main.c
      1          /**
      2            ******************************************************************************
      3            * @file    main.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    11-November-2013
      7            * @brief   Main program body
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "bsp.h"
     30          #include "timers.h "
     31          #include "test_program.h"
     32          #include <stddef.h>
     33          
     34          /* Private typedef -----------------------------------------------------------*/
     35          /* Private define ------------------------------------------------------------*/
     36          #define Background_Task_PRIO    ( tskIDLE_PRIORITY  + 10 )
     37          #define Background_Task_STACK   ( 512 )
     38          
     39          #define Demo_Task_PRIO          ( tskIDLE_PRIORITY  + 9 )
     40          #define Demo_Task_STACK         ( 3048 )
     41          
     42          /* Private macro -------------------------------------------------------------*/
     43          /* Private variables ---------------------------------------------------------*/
     44          xTaskHandle                   Task_Handle;
     45          xTaskHandle                   Demo_Handle;
     46          xTimerHandle                  TouchScreenTimer;
     47          
     48          uint32_t demo_mode = 0;
     49          
     50          extern WM_HWIN  ALARM_hWin;
     51          
     52          /* Private function prototypes -----------------------------------------------*/
     53          static void Background_Task(void * pvParameters);
     54          static void Demo_Task(void * pvParameters);
     55          static void vTimerCallback( xTimerHandle pxTimer );
     56          extern void DEMO_Starup(void);
     57          extern void DEMO_MainMenu(void);
     58          extern void ALARM_BackgroundProcess (void);
     59          /* Private functions ---------------------------------------------------------*/
     60          
     61          /**
     62            * @brief  Main program.
     63            * @param  None
     64            * @retval None
     65            */ 
     66          int main(void)
     67          { 
     68            GPIO_InitTypeDef GPIO_InitStructure;
     69          
     70            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
     71            
     72            
     73            /* Setup SysTick Timer for 1 msec interrupts.*/
     74            if (SysTick_Config(SystemCoreClock / 1000))
     75            { 
     76              /* Capture error */ 
     77              while (1);
     78            }
     79            
     80            /* Enable the BUTTON Clock */
     81            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
     82          
     83            /* Configure Button pin as Output */
     84            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     85            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     86            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     87            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     88            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
     89            //GPIO_Init(GPIOA, &GPIO_InitStructure);
     90            
     91            /* Force capacity to be charged quickly */
     92            //GPIO_WriteBit(GPIOA, GPIO_Pin_0, Bit_RESET);
     93            demo_mode = 1;
     94            Delay (25);
     95            demo_mode = 0;
     96            
     97            /* Check whether the test mode should be started */
     98            //STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_GPIO); 
     99              
    100            //if (STM_EVAL_PBGetState(BUTTON_USER) != Bit_RESET)
    101            if(1)
    102            {
    103              demo_mode = 1;
    104              //while (STM_EVAL_PBGetState(BUTTON_USER) != Bit_RESET);
    105              
    106              //
    107              draw_view();
    108              
    109              //start_test();    
    110            }
    111            
    112            /* Create background task */
    113            
    114            /*
    115            xTaskCreate(Background_Task,
    116                        (signed char const*)"BK_GND",
    117                        Background_Task_STACK,
    118                        NULL,
    119                        Background_Task_PRIO,
    120                        &Task_Handle);
    121          */
    122          
    123            /* Start the FreeRTOS scheduler */
    124            // vTaskStartScheduler();
    125          }
    126          
    127          
    128          /**
    129            * @brief  Background task
    130            * @param  pvParameters not used
    131            * @retval None
    132            */
    133          static void Background_Task(void * pvParameters)
    134          {
    135            uint32_t ticks = 0;
    136              
    137            /* Initialize the BSP layer */
    138            LowLevel_Init();
    139            
    140            /* Init the STemWin GUI Library */
    141            GUI_Init();
    142             
    143            CreateWindow();
    144            while(1) {
    145            }
    146            /* Create demo task */
    147            xTaskCreate(Demo_Task,
    148                        (signed char const*)"GUI_DEMO",
    149                        Demo_Task_STACK,
    150                        NULL,
    151                        Demo_Task_PRIO,
    152                        &Demo_Handle);
    153            
    154            /* Launch Touchscreen Timer */
    155            TouchScreenTimer = xTimerCreate ("Timer", 50, pdTRUE, ( void * ) 1, vTimerCallback );
    156            
    157            if( TouchScreenTimer != NULL )
    158            {
    159              if( xTimerStart( TouchScreenTimer, 0 ) != pdPASS )
    160              {
    161                /* The timer could not be set into the Active state. */
    162              }
    163            }
    164              
    165            /* Run the background task */
    166            while (1)
    167            {
    168              if(ticks++ > 10)
    169              {
    170                ticks = 0;
    171                /* toggle LED3 each 100ms */
    172                STM_EVAL_LEDToggle(LED3);
    173              }
    174              
    175              /* Handle USB Host background process */
    176              USBH_USR_BackgroundProcess();
    177              
    178              /* Handle ALARM background process */
    179              ALARM_BackgroundProcess();
    180              /* This task is handled periodically, each 10 mS */
    181              vTaskDelay(10);
    182            }
    183          }
    184          
    185          
    186          /**
    187            * @brief  Demonstration task
    188            * @param  pvParameters not used
    189            * @retval None
    190            */
    191          static void Demo_Task(void * pvParameters)
    192          {  
    193            /* Change Skin */
    194            PROGBAR_SetDefaultSkin(PROGBAR_SKIN_FLEX);
    195            RADIO_SetDefaultSkin(RADIO_SKIN_FLEX);
    196            SCROLLBAR_SetDefaultSkin(SCROLLBAR_SKIN_FLEX);
    197            SLIDER_SetDefaultSkin(SLIDER_SKIN_FLEX);
    198            SPINBOX_SetDefaultSkin(SPINBOX_SKIN_FLEX);
    199            BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);
    200            
    201            /* Setup layer configuration during startup */
    202            GUI_SetBkColor(GUI_TRANSPARENT);
    203            GUI_SelectLayer(1);
    204            GUI_Clear();
    205            GUI_SetBkColor(GUI_TRANSPARENT); 
    206            GUI_SelectLayer(0);
    207          
    208            /* Run the Startup frame */
    209            DEMO_Starup();
    210            
    211            /* Show the main menu */
    212            DEMO_MainMenu();
    213          }
    214          
    215          
    216          /**
    217            * @brief  Timer callback
    218            * @param  pxTimer 
    219            * @retval None
    220            */
    221          static void vTimerCallback( xTimerHandle pxTimer )
    222          {
    223             BSP_Pointer_Update();
    224          }
    225          
    226          /**
    227            * @brief  Error callback function
    228            * @param  None
    229            * @retval None
    230            */
    231          void vApplicationMallocFailedHook( void )
    232          {
    233            while (1)
    234            {}
    235          }
    236          
    237          #ifdef  USE_FULL_ASSERT
    238          /**
    239            * @brief  Reports the name of the source file and the source line number
    240            *   where the assert_param error has occurred.
    241            * @param  file: pointer to the source file name
    242            * @param  line: assert_param error line source number
    243            * @retval None
    244            */
    245          void assert_failed(uint8_t* file, uint32_t line)
    246          {
    247            /* User can add his own implementation to report the file name and line number,
    248               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    249          
    250            /* Infinite loop */
    251            while (1)
    252            {}
    253          }
    254          #endif
    255          
    256          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> Delay
         8   -> NVIC_PriorityGroupConfig
         8   -> RCC_AHB1PeriphClockCmd
         8   -> draw_view
       0   vApplicationMallocFailedHook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  Demo_Handle
       4  Task_Handle
       4  TouchScreenTimer
       4  demo_mode
      82  main
       2  vApplicationMallocFailedHook

 
 16 bytes in section .bss
 96 bytes in section .text
 
 96 bytes of CODE memory
 16 bytes of DATA memory

Errors: none
Warnings: 4
