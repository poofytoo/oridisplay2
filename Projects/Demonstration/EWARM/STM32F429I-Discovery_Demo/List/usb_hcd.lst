###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        23/Nov/2014  02:10:55
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Libraries\STM32_USB_OTG_Driver\src\usb_hcd.c
#    Command line =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Libraries\STM32_USB_OTG_Driver\src\usb_hcd.c
#        -D USE_STDPERIPH_DRIVER -D STM32F429_439xx -D USE_STM32F429I_DISCO -D
#        USE_USB_OTG_HS -D USE_EMBEDDED_PHY -lcN
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\
#        --diag_suppress Pe111,Pa082 -o
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\
#        --debug --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Config\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Devices\STM32F4xx\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\User\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Demo\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Lib\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Test_Program\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\HID\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\Audio\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Common\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\STM32F429i-Discovery\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\fat_fs\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\Config\
#        -Ohs --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\usb_hcd.lst
#    Object file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\usb_hcd.o
#
###############################################################################

C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Libraries\STM32_USB_OTG_Driver\src\usb_hcd.c
      1          /**
      2            ******************************************************************************
      3            * @file    usb_hcd.c
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    19-March-2012
      7            * @brief   Host Interface Layer
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "usb_core.h"
     30          #include "usb_hcd.h"
     31          #include "usb_conf.h"
     32          #include "usb_bsp.h"
     33          
     34          
     35          /** @addtogroup USB_OTG_DRIVER
     36            * @{
     37            */
     38            
     39          /** @defgroup USB_HCD 
     40            * @brief This file is the interface between EFSL ans Host mass-storage class
     41            * @{
     42            */
     43          
     44          
     45          /** @defgroup USB_HCD_Private_Defines
     46            * @{
     47            */ 
     48          /**
     49            * @}
     50            */ 
     51           
     52          
     53          /** @defgroup USB_HCD_Private_TypesDefinitions
     54            * @{
     55            */ 
     56          /**
     57            * @}
     58            */ 
     59          
     60          
     61          
     62          /** @defgroup USB_HCD_Private_Macros
     63            * @{
     64            */ 
     65          /**
     66            * @}
     67            */ 
     68          
     69          
     70          /** @defgroup USB_HCD_Private_Variables
     71            * @{
     72            */ 
     73          /**
     74            * @}
     75            */ 
     76          
     77          
     78          /** @defgroup USB_HCD_Private_FunctionPrototypes
     79            * @{
     80            */ 
     81          /**
     82            * @}
     83            */ 
     84          
     85          
     86          /** @defgroup USB_HCD_Private_Functions
     87            * @{
     88            */ 
     89          
     90          /**
     91            * @brief  HCD_Init 
     92            *         Initialize the HOST portion of the driver.
     93            * @param  pdev: Selected device
     94            * @param  base_address: OTG base address
     95            * @retval Status
     96            */
     97          uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
     98                            USB_OTG_CORE_ID_TypeDef coreID)
     99          {
    100            uint8_t i = 0;
    101            pdev->host.ConnSts = 0;
    102            
    103            for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
    104            {
    105            pdev->host.ErrCnt[i]  = 0;
    106            pdev->host.XferCnt[i]   = 0;
    107            pdev->host.HC_Status[i]   = HC_IDLE;
    108            }
    109            pdev->host.hc[0].max_packet  = 8; 
    110          
    111            USB_OTG_SelectCore(pdev, coreID);
    112          #ifndef DUAL_ROLE_MODE_ENABLED
    113            USB_OTG_DisableGlobalInt(pdev);
    114            USB_OTG_CoreInit(pdev);
    115          
    116            /* Force Host Mode*/
    117            USB_OTG_SetCurrentMode(pdev , HOST_MODE);
    118            USB_OTG_CoreInitHost(pdev);
    119            USB_OTG_EnableGlobalInt(pdev);
    120          #endif
    121             
    122            return 0;
    123          }
    124          
    125          
    126          /**
    127            * @brief  HCD_GetCurrentSpeed
    128            *         Get Current device Speed.
    129            * @param  pdev : Selected device
    130            * @retval Status
    131            */
    132          
    133          uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
    134          {    
    135              USB_OTG_HPRT0_TypeDef  HPRT0;
    136              HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
    137              
    138              return HPRT0.b.prtspd;
    139          }
    140          
    141          /**
    142            * @brief  HCD_ResetPort
    143            *         Issues the reset command to device
    144            * @param  pdev : Selected device
    145            * @retval Status
    146            */
    147          uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
    148          {
    149            /*
    150            Before starting to drive a USB reset, the application waits for the OTG 
    151            interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
    152            which indicates that the bus is stable again after the electrical debounce 
    153            caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
    154            */
    155            
    156            USB_OTG_ResetPort(pdev); 
    157            return 0;
    158          }
    159          
    160          /**
    161            * @brief  HCD_IsDeviceConnected
    162            *         Check if the device is connected.
    163            * @param  pdev : Selected device
    164            * @retval Device connection status. 1 -> connected and 0 -> disconnected
    165            * 
    166            */
    167          uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
    168          {
    169            return (pdev->host.ConnSts);
    170          }
    171          
    172          /**
    173            * @brief  HCD_GetCurrentFrame 
    174            *         This function returns the frame number for sof packet
    175            * @param  pdev : Selected device
    176            * @retval Frame number
    177            * 
    178            */
    179          uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
    180          {
    181           return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
    182          }
    183          
    184          /**
    185            * @brief  HCD_GetURB_State 
    186            *         This function returns the last URBstate
    187            * @param  pdev: Selected device
    188            * @retval URB_STATE
    189            * 
    190            */
    191          URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
    192          {
    193            return pdev->host.URB_State[ch_num] ;
    194          }
    195          
    196          /**
    197            * @brief  HCD_GetXferCnt 
    198            *         This function returns the last URBstate
    199            * @param  pdev: Selected device
    200            * @retval No. of data bytes transferred
    201            * 
    202            */
    203          uint32_t HCD_GetXferCnt (USB_OTG_CORE_HANDLE *pdev, uint8_t ch_num) 
    204          {
    205            return pdev->host.XferCnt[ch_num] ;
    206          }
    207          
    208          
    209          
    210          /**
    211            * @brief  HCD_GetHCState 
    212            *         This function returns the HC Status 
    213            * @param  pdev: Selected device
    214            * @retval HC_STATUS
    215            * 
    216            */
    217          HC_STATUS HCD_GetHCState (USB_OTG_CORE_HANDLE *pdev ,  uint8_t ch_num) 
    218          {
    219            return pdev->host.HC_Status[ch_num] ;
    220          }
    221          
    222          /**
    223            * @brief  HCD_HC_Init 
    224            *         This function prepare a HC and start a transfer
    225            * @param  pdev: Selected device
    226            * @param  hc_num: Channel number 
    227            * @retval status 
    228            */
    229          uint32_t HCD_HC_Init (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
    230          {
    231            return USB_OTG_HC_Init(pdev, hc_num);  
    232          }
    233          
    234          /**
    235            * @brief  HCD_SubmitRequest 
    236            *         This function prepare a HC and start a transfer
    237            * @param  pdev: Selected device
    238            * @param  hc_num: Channel number 
    239            * @retval status
    240            */
    241          uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
    242          {
    243            
    244            pdev->host.URB_State[hc_num] =   URB_IDLE;  
    245            pdev->host.hc[hc_num].xfer_count = 0 ;
    246            return USB_OTG_HC_StartXfer(pdev, hc_num);
    247          }
    248          
    249          
    250          /**
    251          * @}
    252          */ 
    253          
    254          /**
    255          * @}
    256          */ 
    257          
    258          /**
    259          * @}
    260          */
    261          
    262          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HCD_GetCurrentFrame
       0   HCD_GetCurrentSpeed
       0   HCD_GetHCState
       0   HCD_GetURB_State
       0   HCD_GetXferCnt
       0   HCD_HC_Init
         0   -> USB_OTG_HC_Init
      16   HCD_Init
        16   -> USB_OTG_CoreInit
        16   -> USB_OTG_CoreInitHost
        16   -> USB_OTG_DisableGlobalInt
        16   -> USB_OTG_EnableGlobalInt
        16   -> USB_OTG_SelectCore
        16   -> USB_OTG_SetCurrentMode
       0   HCD_IsDeviceConnected
       8   HCD_ResetPort
         8   -> USB_OTG_ResetPort
       0   HCD_SubmitRequest
         0   -> USB_OTG_HC_StartXfer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  HCD_GetCurrentFrame
      12  HCD_GetCurrentSpeed
       8  HCD_GetHCState
       8  HCD_GetURB_State
      10  HCD_GetXferCnt
       4  HCD_HC_Init
     104  HCD_Init
       6  HCD_IsDeviceConnected
      14  HCD_ResetPort
      20  HCD_SubmitRequest

 
 194 bytes in section .text
 
 194 bytes of CODE memory

Errors: none
Warnings: none
