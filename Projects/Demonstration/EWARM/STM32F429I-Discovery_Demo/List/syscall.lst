###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        23/Nov/2014  02:10:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Utilities\Third_Party\fat_fs\src\option\syscall.c
#    Command line =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Utilities\Third_Party\fat_fs\src\option\syscall.c
#        -D USE_STDPERIPH_DRIVER -D STM32F429_439xx -D USE_STM32F429I_DISCO -D
#        USE_USB_OTG_HS -D USE_EMBEDDED_PHY -lcN
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\
#        --diag_suppress Pe111,Pa082 -o
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\
#        --debug --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Config\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Devices\STM32F4xx\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\User\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Demo\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Lib\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Test_Program\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\HID\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\Audio\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Common\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\STM32F429i-Discovery\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\fat_fs\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\Config\
#        -Ohs --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\syscall.lst
#    Object file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\syscall.o
#
###############################################################################

C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Utilities\Third_Party\fat_fs\src\option\syscall.c
      1          /*------------------------------------------------------------------------*/
      2          /* Sample code of OS dependent controls for FatFs R0.08b                  */
      3          /* (C)ChaN, 2011                                                          */
      4          /*------------------------------------------------------------------------*/
      5          
      6          #include <stdlib.h>		/* ANSI memory controls */
      7          //#include <malloc.h>		/* ANSI memory controls */
      8          
      9          #include "global_includes.h"
     10          
     11          
     12          #if _FS_REENTRANT
     13          /*-----------------------------------------------------------------------
     14           Create a Synchronization Object
     15          ------------------------------------------------------------------------
     16           This function is called in f_mount function to create a new
     17           synchronization object, such as semaphore and mutex. When a zero is
     18           returned, the f_mount function fails with FR_INT_ERR.
     19          */
     20          
     21          int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
     22          	BYTE vol,			/* Corresponding logical drive being processed */
     23          	_SYNC_t *sobj		/* Pointer to return the created sync object */
     24          )
     25          {
     26          	int ret;
     27          
     28          	*sobj = xSemaphoreCreateMutex();		/* FreeRTOS */
     29          	ret = (*sobj != NULL);
     30          
     31          	return ret;
     32          }
     33          
     34          
     35          
     36          /*------------------------------------------------------------------------*/
     37          /* Delete a Synchronization Object                                        */
     38          /*------------------------------------------------------------------------*/
     39          /* This function is called in f_mount function to delete a synchronization
     40          /  object that created with ff_cre_syncobj function. When a zero is
     41          /  returned, the f_mount function fails with FR_INT_ERR.
     42          */
     43          
     44          int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
     45          	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
     46          )
     47          {
     48           
     49            vQueueDelete (sobj);
     50            return 1;
     51          }
     52          
     53          
     54          
     55          /*------------------------------------------------------------------------*/
     56          /* Request Grant to Access the Volume                                     */
     57          /*------------------------------------------------------------------------*/
     58          /* This function is called on entering file functions to lock the volume.
     59          /  When a zero is returned, the file function fails with FR_TIMEOUT.
     60          */
     61          
     62          int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
     63          	_SYNC_t sobj	/* Sync object to wait */
     64          )
     65          {
     66          	int ret;
     67          
     68          	ret = (xSemaphoreTake(sobj, _FS_TIMEOUT) == pdTRUE);	/* FreeRTOS */
     69          
     70          	return ret;
     71          }
     72          
     73          
     74          
     75          /*------------------------------------------------------------------------*/
     76          /* Release Grant to Access the Volume                                     */
     77          /*------------------------------------------------------------------------*/
     78          /* This function is called on leaving file functions to unlock the volume.
     79          */
     80          
     81          void ff_rel_grant (
     82          	_SYNC_t sobj	/* Sync object to be signaled */
     83          )
     84          {
     85          	xSemaphoreGive(sobj);	/* FreeRTOS */
     86          }
     87          
     88          #endif
     89          
     90          
     91          
     92          
     93          #if _USE_LFN == 3	/* LFN with a working buffer on the heap */
     94          /*------------------------------------------------------------------------*/
     95          /* Allocate a memory block                                                */
     96          /*------------------------------------------------------------------------*/
     97          /* If a NULL is returned, the file function fails with FR_NOT_ENOUGH_CORE.
     98          */
     99          
    100          void* ff_memalloc (	/* Returns pointer to the allocated memory block */
    101          	UINT size		/* Number of bytes to allocate */
    102          )
    103          {
    104          	return malloc(size);
    105          }
    106          
    107          
    108          /*------------------------------------------------------------------------*/
    109          /* Free a memory block                                                    */
    110          /*------------------------------------------------------------------------*/
    111          
    112          void ff_memfree(
    113          	void* mblock	/* Pointer to the memory block to free */
    114          )
    115          {
    116          	free(mblock);
    117          }
    118          
    119          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ff_cre_syncobj
         8   -> xQueueCreateMutex
       8   ff_del_syncobj
         8   -> vQueueDelete
       0   ff_rel_grant
         0   -> xQueueGenericSend
       8   ff_req_grant
         8   -> xQueueGenericReceive


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      18  ff_cre_syncobj
      14  ff_del_syncobj
      10  ff_rel_grant
      26  ff_req_grant

 
 68 bytes in section .text
 
 68 bytes of CODE memory

Errors: none
Warnings: none
