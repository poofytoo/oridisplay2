###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        11/Nov/2014  12:37:08
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Utilities\STM32F429I-Discovery\stm32f429i_discovery.c
#    Command line =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Utilities\STM32F429I-Discovery\stm32f429i_discovery.c
#        -D USE_STDPERIPH_DRIVER -D STM32F429_439xx -D USE_STM32F429I_DISCO -D
#        USE_USB_OTG_HS -D USE_EMBEDDED_PHY -lcN
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\
#        --diag_suppress Pe111,Pa082 -o
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\
#        --debug --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Config\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Devices\STM32F4xx\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\User\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Demo\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Lib\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Test_Program\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\HID\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\Audio\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Common\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\STM32F429i-Discovery\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\fat_fs\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\Config\
#        -Ohs --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\stm32f429i_discovery.lst
#    Object file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\stm32f429i_discovery.o
#
###############################################################################

C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Utilities\STM32F429I-Discovery\stm32f429i_discovery.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f429i_discovery.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    28-October-2013
      7            * @brief   This file provides set of firmware functions to manage Leds and
      8            *          push-button available on STM32F429I-DISCO Kit from STMicroelectronics.
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     13            *
     14            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     15            * You may not use this file except in compliance with the License.
     16            * You may obtain a copy of the License at:
     17            *
     18            *        http://www.st.com/software_license_agreement_liberty_v2
     19            *
     20            * Unless required by applicable law or agreed to in writing, software 
     21            * distributed under the License is distributed on an "AS IS" BASIS, 
     22            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     23            * See the License for the specific language governing permissions and
     24            * limitations under the License.
     25            *
     26            ******************************************************************************
     27            */  
     28            
     29          /* Includes ------------------------------------------------------------------*/
     30          #include "stm32f429i_discovery.h"
     31          
     32          /** @addtogroup Utilities
     33            * @{
     34            */ 
     35          
     36          /** @addtogroup STM32F4_DISCOVERY
     37            * @{
     38            */   
     39          
     40          /** @addtogroup STM32F429I_DISCOVERY
     41            * @{
     42            */
     43                
     44          /** @defgroup STM32F429I-DISCOVERY_LOW_LEVEL 
     45            * @brief This file provides set of firmware functions to manage Leds and push-button
     46            *        available on STM32F429I-Discovery Kit from STMicroelectronics.
     47            * @{
     48            */ 
     49          
     50          /** @defgroup STM32F429I-DISCOVERY_LOW_LEVEL_Private_TypesDefinitions
     51            * @{
     52            */ 
     53          /**
     54            * @}
     55            */ 
     56          
     57          
     58          /** @defgroup STM32F429I-DISCOVERY_LOW_LEVEL_Private_Defines
     59            * @{
     60            */ 
     61          /**
     62            * @}
     63            */ 
     64          
     65          
     66          /** @defgroup STM32F429I-DISCOVERY_LOW_LEVEL_Private_Macros
     67            * @{
     68            */ 
     69          /**
     70            * @}
     71            */ 
     72          
     73          
     74          /** @defgroup STM32F429I-DISCOVERY_LOW_LEVEL_Private_Variables
     75            * @{
     76            */ 
     77          GPIO_TypeDef* GPIO_PORT[LEDn] = {LED3_GPIO_PORT, LED4_GPIO_PORT};
     78          const uint16_t GPIO_PIN[LEDn] = {LED3_PIN, LED4_PIN};
     79          const uint32_t GPIO_CLK[LEDn] = {LED3_GPIO_CLK, LED4_GPIO_CLK};
     80          
     81          GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {USER_BUTTON_GPIO_PORT}; 
     82          
     83          const uint16_t BUTTON_PIN[BUTTONn] = {USER_BUTTON_PIN}; 
     84          
     85          const uint32_t BUTTON_CLK[BUTTONn] = {USER_BUTTON_GPIO_CLK};
     86          
     87          const uint16_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};
     88          
     89          const uint8_t BUTTON_PORT_SOURCE[BUTTONn] = {USER_BUTTON_EXTI_PORT_SOURCE};
     90          								 
     91          const uint8_t BUTTON_PIN_SOURCE[BUTTONn] = {USER_BUTTON_EXTI_PIN_SOURCE}; 
     92          const uint8_t BUTTON_IRQn[BUTTONn] = {USER_BUTTON_EXTI_IRQn};
     93          
     94          DMA_InitTypeDef    sEEDMA_InitStructure; 
     95          NVIC_InitTypeDef   NVIC_InitStructure;
     96          
     97          /**
     98            * @}
     99            */ 
    100          
    101          
    102          /** @defgroup STM32F429I-DISCOVERY_LOW_LEVEL_Private_FunctionPrototypes
    103            * @{
    104            */ 
    105          
    106          /**
    107            * @}
    108            */ 
    109          
    110          /** @defgroup STM32F429I-DISCOVERY_LOW_LEVEL_Private_Functions
    111            * @{
    112            */ 
    113          
    114          /**
    115            * @brief  Configures LED GPIO.
    116            * @param  Led: Specifies the Led to be configured. 
    117            *   This parameter can be one of following parameters:
    118            *     @arg LED3
    119            *     @arg LED4
    120            * @retval None
    121            */
    122          void STM_EVAL_LEDInit(Led_TypeDef Led)
    123          {
    124            GPIO_InitTypeDef  GPIO_InitStructure;
    125            
    126            /* Enable the GPIO_LED Clock */
    127            RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
    128          
    129            /* Configure the GPIO_LED pin */
    130            GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
    131            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    132            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    133            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    134            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    135            GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
    136          }
    137          
    138          /**
    139            * @brief  Turns selected LED On.
    140            * @param  Led: Specifies the Led to be set on. 
    141            *   This parameter can be one of following parameters:
    142            *     @arg LED3
    143            *     @arg LED4 
    144            * @retval None
    145            */
    146          void STM_EVAL_LEDOn(Led_TypeDef Led)
    147          {
    148            GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
    149          }
    150          
    151          /**
    152            * @brief  Turns selected LED Off.
    153            * @param  Led: Specifies the Led to be set off. 
    154            *   This parameter can be one of following parameters:
    155            *     @arg LED3
    156            *     @arg LED4
    157            * @retval None
    158            */
    159          void STM_EVAL_LEDOff(Led_TypeDef Led)
    160          {
    161            GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
    162          }
    163          
    164          /**
    165            * @brief  Toggles the selected LED.
    166            * @param  Led: Specifies the Led to be toggled. 
    167            *   This parameter can be one of following parameters:
    168            *     @arg LED3
    169            *     @arg LED4  
    170            * @retval None
    171            */
    172          void STM_EVAL_LEDToggle(Led_TypeDef Led)
    173          {
    174            GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
    175          }
    176          
    177          /**
    178            * @brief  Configures Button GPIO and EXTI Line.
    179            * @param  Button: Specifies the Button to be configured.
    180            *   This parameter should be: BUTTON_USER
    181            * @param  Button_Mode: Specifies Button mode.
    182            *   This parameter can be one of following parameters:   
    183            *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
    184            *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
    185            *                            generation capability  
    186            * @retval None
    187            */
    188          void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    189          {
    190            GPIO_InitTypeDef GPIO_InitStructure;
    191            EXTI_InitTypeDef EXTI_InitStructure;
    192            NVIC_InitTypeDef NVIC_InitStructure;
    193          
    194            /* Enable the BUTTON Clock */
    195            RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
    196            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    197          
    198            /* Configure Button pin as input */
    199            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    200            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    201            GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
    202            GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
    203          
    204            if (Button_Mode == BUTTON_MODE_EXTI)
    205            {
    206              /* Connect Button EXTI Line to Button GPIO Pin */
    207              SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
    208          
    209              /* Configure Button EXTI line */
    210              EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
    211              EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    212              EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
    213              EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    214              EXTI_Init(&EXTI_InitStructure);
    215          
    216              /* Enable and set Button EXTI Interrupt to the lowest priority */
    217              NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
    218              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    219              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    220              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    221          
    222              NVIC_Init(&NVIC_InitStructure); 
    223            }
    224          }
    225          
    226          /**
    227            * @brief  Returns the selected Button state.
    228            * @param  Button: Specifies the Button to be checked.
    229            *   This parameter should be: BUTTON_USER  
    230            * @retval The Button GPIO pin value.
    231            */
    232          uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
    233          {
    234            return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
    235          }
    236          
    237          /**
    238            * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
    239            * @param  None
    240            * @retval None
    241            */
    242          void sEE_LowLevel_DeInit(void)
    243          {
    244            GPIO_InitTypeDef  GPIO_InitStructure; 
    245             
    246            /* sEE_I2C Peripheral Disable */
    247            I2C_Cmd(sEE_I2C, DISABLE);
    248           
    249            /* sEE_I2C DeInit */
    250            I2C_DeInit(sEE_I2C);
    251          
    252            /*!< sEE_I2C Periph clock disable */
    253            RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
    254              
    255            /*!< GPIO configuration */  
    256            /*!< Configure sEE_I2C pins: SCL */
    257            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
    258            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    259            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    260            GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
    261          
    262            /*!< Configure sEE_I2C pins: SDA */
    263            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
    264            GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
    265          
    266            /* Configure and enable I2C DMA TX Stream interrupt */
    267            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
    268            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    269            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    270            NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
    271            NVIC_Init(&NVIC_InitStructure);
    272          
    273            /* Configure and enable I2C DMA RX Stream interrupt */
    274            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
    275            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    276            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    277            NVIC_Init(&NVIC_InitStructure);   
    278            
    279            /* Disable and Deinitialize the DMA Streams */
    280            DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
    281            DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
    282            DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
    283            DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
    284          }
    285          
    286          /**
    287            * @brief  Initializes peripherals used by the I2C EEPROM driver.
    288            * @param  None
    289            * @retval None
    290            */
    291          void sEE_LowLevel_Init(void)
    292          {
    293            GPIO_InitTypeDef  GPIO_InitStructure; 
    294             
    295            /*!< sEE_I2C Periph clock enable */
    296            RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
    297            
    298            /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
    299            RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
    300            
    301            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    302            
    303            /* Reset sEE_I2C IP */
    304            RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
    305            /* Release reset signal of sEE_I2C IP */
    306            RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
    307              
    308            /*!< GPIO configuration */  
    309            /*!< Configure sEE_I2C pins: SCL */   
    310            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
    311            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    312            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    313            GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    314            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    315            GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
    316          
    317            /*!< Configure sEE_I2C pins: SDA */
    318            GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
    319            GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
    320          
    321            /* Connect PXx to I2C_SCL*/
    322            GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
    323          
    324            /* Connect PXx to I2C_SDA*/
    325            GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
    326            
    327            /* Configure and enable I2C DMA TX Channel interrupt */
    328            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
    329            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    330            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    331            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    332            NVIC_Init(&NVIC_InitStructure);
    333          
    334            /* Configure and enable I2C DMA RX Channel interrupt */
    335            NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
    336            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
    337            NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
    338            NVIC_Init(&NVIC_InitStructure);  
    339            
    340            /*!< I2C DMA TX and RX channels configuration */
    341            /* Enable the DMA clock */
    342            RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
    343            
    344            /* Clear any pending flag on Rx Stream  */
    345            DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
    346                                                 sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
    347            /* Disable the EE I2C Tx DMA stream */
    348            DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
    349            /* Configure the DMA stream for the EE I2C peripheral TX direction */
    350            DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
    351            sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
    352            sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
    353            sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
    354            sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
    355            sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
    356            sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    357            sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    358            sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    359            sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    360            sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    361            sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
    362            sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
    363            sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
    364            sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    365            sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    366            DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
    367          
    368            /* Clear any pending flag on Rx Stream */
    369            DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
    370                                                 sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
    371            /* Disable the EE I2C DMA Rx stream */
    372            DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
    373            /* Configure the DMA stream for the EE I2C peripheral RX direction */
    374            DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
    375            DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
    376            
    377            /* Enable the DMA Channels Interrupts */
    378            DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
    379            DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
    380          }
    381          
    382          /**
    383            * @brief  Initializes DMA channel used by the I2C EEPROM driver.
    384            * @param  None
    385            * @retval None
    386            */
    387          void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
    388          { 
    389            /* Initialize the DMA with the new parameters */
    390            if (Direction == sEE_DIRECTION_TX)
    391            {
    392              /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    393              sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    394              sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
    395              sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
    396              DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
    397            }
    398            else
    399            { 
    400              /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    401              sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
    402              sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
    403              sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    404              DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
    405            }
    406          }
    407          
    408          /**
    409            * @}
    410            */ 
    411          
    412          /**
    413            * @}
    414            */ 
    415          
    416          /**
    417            * @}
    418            */   
    419          
    420          /**
    421            * @}
    422            */ 
    423          
    424          /**
    425            * @}
    426            */ 
    427                
    428          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   STM_EVAL_LEDInit
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd
       0   STM_EVAL_LEDOff
       0   STM_EVAL_LEDOn
       0   STM_EVAL_LEDToggle
       0   STM_EVAL_PBGetState
         0   -> GPIO_ReadInputDataBit
      32   STM_EVAL_PBInit
        32   -> EXTI_Init
        32   -> GPIO_Init
        32   -> NVIC_Init
        32   -> RCC_AHB1PeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
        32   -> SYSCFG_EXTILineConfig
       0   sEE_LowLevel_DMAConfig
         0   -> DMA_Init
      24   sEE_LowLevel_DeInit
        24   -> DMA_Cmd
        24   -> DMA_DeInit
        24   -> GPIO_Init
        24   -> I2C_Cmd
        24   -> I2C_DeInit
        24   -> NVIC_Init
        24   -> RCC_APB1PeriphClockCmd
      24   sEE_LowLevel_Init
        24   -> DMA_ClearFlag
        24   -> DMA_Cmd
        24   -> DMA_DeInit
        24   -> DMA_ITConfig
        24   -> DMA_Init
        24   -> GPIO_Init
        24   -> GPIO_PinAFConfig
        24   -> NVIC_Init
        24   -> RCC_AHB1PeriphClockCmd
        24   -> RCC_APB1PeriphClockCmd
        24   -> RCC_APB1PeriphResetCmd
        24   -> RCC_APB2PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
       4  BUTTON_CLK
       2  BUTTON_EXTI_LINE
       1  BUTTON_IRQn
       2  BUTTON_PIN
       1  BUTTON_PIN_SOURCE
       4  BUTTON_PORT
       1  BUTTON_PORT_SOURCE
       8  GPIO_CLK
       4  GPIO_PIN
       8  GPIO_PORT
      70  STM_EVAL_LEDInit
      18  STM_EVAL_LEDOff
      18  STM_EVAL_LEDOn
      22  STM_EVAL_LEDToggle
      18  STM_EVAL_PBGetState
     156  STM_EVAL_PBInit
      64  sEEDMA_InitStructure
          NVIC_InitStructure
      34  sEE_LowLevel_DMAConfig
     152  sEE_LowLevel_DeInit
     342  sEE_LowLevel_Init

 
  64 bytes in section .bss
  12 bytes in section .data
 897 bytes in section .text
 
 897 bytes of CODE memory
  76 bytes of DATA memory

Errors: none
Warnings: none
