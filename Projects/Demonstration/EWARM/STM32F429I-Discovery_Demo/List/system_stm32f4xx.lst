###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        11/Nov/2014  12:37:24
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\Core\Devices\STM32F4xx\system_stm32f4xx.c
#    Command line =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\Core\Devices\STM32F4xx\system_stm32f4xx.c
#        -D USE_STDPERIPH_DRIVER -D STM32F429_439xx -D USE_STM32F429I_DISCO -D
#        USE_USB_OTG_HS -D USE_EMBEDDED_PHY -lcN
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\
#        --diag_suppress Pe111,Pa082 -o
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\
#        --debug --endian=little --cpu=Cortex-M4F -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Config\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Devices\STM32F4xx\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\User\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Demo\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Lib\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\Core\Test_Program\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Core\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\MSC\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\HID\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_Device_Library\Class\Audio\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32_USB_OTG_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Common\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\STM32F429i-Discovery\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\fat_fs\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\portable\IAR\ARM_CM4F\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Utilities\Third_Party\FreeRTOS\Source\include\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\inc\
#        -I
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\..\..\..\Libraries\STemWinLibrary522_4x9i\Config\
#        -Ohs --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\List\system_stm32f4xx.lst
#    Object file  =  
#        C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\EWARM\STM32F429I-Discovery_Demo\Obj\system_stm32f4xx.o
#
###############################################################################

C:\Users\MichaelXu\Desktop\STM32F429I-Discovery_FW_V1.0.1\Projects\Demonstration\Core\Devices\STM32F4xx\system_stm32f4xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f4xx.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    11-November-2013
      7            * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
      8            *          This file is customized to run on STM32F429I-DISCO board only.
      9            *          
     10            *    Note: The system clock (SYSCLK) is configured to 168 MHz to provide 48 MHz clock
     11            *          needed for the USB operation. 
     12            *          Please note that the USB is not functional if the system clock is set to 180 MHz.    
     13            *             
     14            * 1.  This file provides two functions and one global variable to be called from 
     15            *     user application:
     16            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     17            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     18            *                      depending on the configuration made in the clock xls tool. 
     19            *                      This function is called at startup just after reset and 
     20            *                      before branch to main program. This call is made inside
     21            *                      the "startup_stm32f429_439xx.s" file.
     22            *
     23            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     24            *                                  by the user application to setup the SysTick 
     25            *                                  timer or configure other parameters.
     26            *                                     
     27            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     28            *                                 be called whenever the core clock is changed
     29            *                                 during program execution.
     30            *
     31            * 2. After each device reset the HSI (16 MHz) is used as system clock source.
     32            *    Then SystemInit() function is called, in "startup_stm32f429_439xx.s" file, to
     33            *    configure the system clock before to branch to main program.
     34            *
     35            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     36            *    function will do nothing and HSI still used as system clock source. User can 
     37            *    add some code to deal with this issue inside the SetSysClock() function.
     38            *
     39            * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
     40            *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
     41            *    through PLL, and you are using different crystal you have to adapt the HSE
     42            *    value to your own configuration.
     43            *
     44            * 5. This file configures the system clock as follows:
     45            *=============================================================================
     46            *=============================================================================
     47            *        Supported STM32F4xx device revision    | 
     48            *-----------------------------------------------------------------------------
     49            *        System Clock source                    | PLL (HSE)
     50            *-----------------------------------------------------------------------------
     51            *        SYSCLK(Hz)                             | 168000000
     52            *-----------------------------------------------------------------------------
     53            *        HCLK(Hz)                               | 168000000
     54            *-----------------------------------------------------------------------------
     55            *        AHB Prescaler                          | 1
     56            *-----------------------------------------------------------------------------
     57            *        APB1 Prescaler                         | 4
     58            *-----------------------------------------------------------------------------
     59            *        APB2 Prescaler                         | 2
     60            *-----------------------------------------------------------------------------
     61            *        HSE Frequency(Hz)                      | 8000000
     62            *-----------------------------------------------------------------------------
     63            *        PLL_M                                  | 8
     64            *-----------------------------------------------------------------------------
     65            *        PLL_N                                  | 336
     66            *-----------------------------------------------------------------------------
     67            *        PLL_P                                  | 2
     68            *-----------------------------------------------------------------------------
     69            *        PLL_Q                                  | 7
     70            *-----------------------------------------------------------------------------
     71            *        PLLI2S_N                               | NA
     72            *-----------------------------------------------------------------------------
     73            *        PLLI2S_R                               | NA
     74            *-----------------------------------------------------------------------------
     75            *        I2S input clock                        | NA
     76            *-----------------------------------------------------------------------------
     77            *        VDD(V)                                 | 3,3
     78            *-----------------------------------------------------------------------------
     79            *        Main regulator output voltage          | Scale1 mode
     80            *-----------------------------------------------------------------------------
     81            *        Flash Latency(WS)                      | 5
     82            *-----------------------------------------------------------------------------
     83            *        Prefetch Buffer                        | ON
     84            *-----------------------------------------------------------------------------
     85            *        Instruction cache                      | ON
     86            *-----------------------------------------------------------------------------
     87            *        Data cache                             | ON
     88            *-----------------------------------------------------------------------------
     89            *        Require 48MHz for USB OTG FS,          | Enabled
     90            *        SDIO and RNG clock                     |
     91            *-----------------------------------------------------------------------------
     92            *=============================================================================
     93            ****************************************************************************** 
     94            * @attention
     95            *
     96            * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
     97            *
     98            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     99            * You may not use this file except in compliance with the License.
    100            * You may obtain a copy of the License at:
    101            *
    102            *        http://www.st.com/software_license_agreement_liberty_v2
    103            *
    104            * Unless required by applicable law or agreed to in writing, software 
    105            * distributed under the License is distributed on an "AS IS" BASIS, 
    106            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    107            * See the License for the specific language governing permissions and
    108            * limitations under the License.
    109            *
    110            ******************************************************************************
    111            */
    112          
    113          /** @addtogroup CMSIS
    114            * @{
    115            */
    116          
    117          /** @addtogroup stm32f4xx_system
    118            * @{
    119            */  
    120            
    121          /** @addtogroup STM32F4xx_System_Private_Includes
    122            * @{
    123            */
    124          
    125          #include "stm32f4xx.h"
    126          
    127          /**
    128            * @}
    129            */
    130          
    131          /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
    132            * @{
    133            */
    134          
    135          /**
    136            * @}
    137            */
    138          
    139          /** @addtogroup STM32F4xx_System_Private_Defines
    140            * @{
    141            */
    142          
    143          /************************* Miscellaneous Configuration ************************/
    144          /*!< Uncomment the following line if you need to use external SDRAM mounted
    145               on STM32F429I-DISCO board as data memory  */
    146          /* #define DATA_IN_ExtSDRAM */
    147          
    148          /*!< Uncomment the following line if you need to relocate your vector Table in
    149               Internal SRAM. */
    150          /* #define VECT_TAB_SRAM */
    151          #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
    152                                             This value must be a multiple of 0x200. */
    153          /******************************************************************************/
    154          
    155          /************************* PLL Parameters *************************************/
    156          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
    157          #define PLL_M      8
    158          
    159          #define PLL_N      336
    160          
    161          /* SYSCLK = PLL_VCO / PLL_P */
    162          #define PLL_P      2
    163          
    164          /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
    165          #define PLL_Q      7
    166          
    167          /******************************************************************************/
    168          
    169          /**
    170            * @}
    171            */
    172          
    173          /** @addtogroup STM32F4xx_System_Private_Macros
    174            * @{
    175            */
    176          
    177          /**
    178            * @}
    179            */
    180          
    181          /** @addtogroup STM32F4xx_System_Private_Variables
    182            * @{
    183            */
    184          
    185            uint32_t SystemCoreClock = 168000000;
    186          
    187            __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    188          
    189          /**
    190            * @}
    191            */
    192          
    193          /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
    194            * @{
    195            */
    196          
    197          static void SetSysClock(void);
    198          #if defined (DATA_IN_ExtSDRAM)
    199            static void SystemInit_ExtMemCtl(void); 
    200          #endif /* DATA_IN_ExtSDRAM */
    201          
    202          /**
    203            * @}
    204            */
    205          
    206          /** @addtogroup STM32F4xx_System_Private_Functions
    207            * @{
    208            */
    209          
    210          /**
    211            * @brief  Setup the microcontroller system
    212            *         Initialize the Embedded Flash Interface, the PLL and update the 
    213            *         SystemFrequency variable.
    214            * @param  None
    215            * @retval None
    216            */
    217          void SystemInit(void)
    218          {
    219            /* FPU settings ------------------------------------------------------------*/
    220            #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    221              SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
    222            #endif
    223            /* Reset the RCC clock configuration to the default reset state ------------*/
    224            /* Set HSION bit */
    225            RCC->CR |= (uint32_t)0x00000001;
    226          
    227            /* Reset CFGR register */
    228            RCC->CFGR = 0x00000000;
    229          
    230            /* Reset HSEON, CSSON and PLLON bits */
    231            RCC->CR &= (uint32_t)0xFEF6FFFF;
    232          
    233            /* Reset PLLCFGR register */
    234            RCC->PLLCFGR = 0x24003010;
    235          
    236            /* Reset HSEBYP bit */
    237            RCC->CR &= (uint32_t)0xFFFBFFFF;
    238          
    239            /* Disable all interrupts */
    240            RCC->CIR = 0x00000000;
    241          
    242          #if defined (DATA_IN_ExtSDRAM)
    243            SystemInit_ExtMemCtl(); 
    244          #endif /* DATA_IN_ExtSDRAM */
    245                   
    246            /* Configure the System clock source, PLL Multiplier and Divider factors, 
    247               AHB/APBx prescalers and Flash settings ----------------------------------*/
    248            SetSysClock();
    249          
    250            /* Configure the Vector Table location add offset address ------------------*/
    251          #ifdef VECT_TAB_SRAM
    252            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    253          #else
    254            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
    255          #endif
    256          }
    257          
    258          /**
    259             * @brief  Update SystemCoreClock variable according to Clock Register Values.
    260            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    261            *         be used by the user application to setup the SysTick timer or configure
    262            *         other parameters.
    263            *           
    264            * @note   Each time the core clock (HCLK) changes, this function must be called
    265            *         to update SystemCoreClock variable value. Otherwise, any configuration
    266            *         based on this variable will be incorrect.         
    267            *     
    268            * @note   - The system frequency computed by this function is not the real 
    269            *           frequency in the chip. It is calculated based on the predefined 
    270            *           constant and the selected clock source:
    271            *             
    272            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    273            *                                              
    274            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    275            *                          
    276            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    277            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    278            *         
    279            *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
    280            *             16 MHz) but the real value may vary depending on the variations
    281            *             in voltage and temperature.   
    282            *    
    283            *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
    284            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    285            *              frequency of the crystal used. Otherwise, this function may
    286            *              have wrong result.
    287            *                
    288            *         - The result of this function could be not correct when using fractional
    289            *           value for HSE crystal.
    290            *     
    291            * @param  None
    292            * @retval None
    293            */
    294          void SystemCoreClockUpdate(void)
    295          {
    296            uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
    297            
    298            /* Get SYSCLK source -------------------------------------------------------*/
    299            tmp = RCC->CFGR & RCC_CFGR_SWS;
    300          
    301            switch (tmp)
    302            {
    303              case 0x00:  /* HSI used as system clock source */
    304                SystemCoreClock = HSI_VALUE;
    305                break;
    306              case 0x04:  /* HSE used as system clock source */
    307                SystemCoreClock = HSE_VALUE;
    308                break;
    309              case 0x08:  /* PLL used as system clock source */
    310          
    311                /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
    312                   SYSCLK = PLL_VCO / PLL_P
    313                   */    
    314                pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    315                pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    316                
    317                if (pllsource != 0)
    318                {
    319                  /* HSE used as PLL clock source */
    320                  pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    321                }
    322                else
    323                {
    324                  /* HSI used as PLL clock source */
    325                  pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
    326                }
    327          
    328                pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
    329                SystemCoreClock = pllvco/pllp;
    330                break;
    331              default:
    332                SystemCoreClock = HSI_VALUE;
    333                break;
    334            }
    335            /* Compute HCLK frequency --------------------------------------------------*/
    336            /* Get HCLK prescaler */
    337            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    338            /* HCLK frequency */
    339            SystemCoreClock >>= tmp;
    340          }
    341          
    342          /**
    343            * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
    344            *         AHB/APBx prescalers and Flash settings
    345            * @Note   This function should be called only once the RCC clock configuration  
    346            *         is reset to the default reset state (done in SystemInit() function).   
    347            * @param  None
    348            * @retval None
    349            */
    350          static void SetSysClock(void)
    351          {
    352          /******************************************************************************/
    353          /*            PLL (clocked by HSE) used as System clock source                */
    354          /******************************************************************************/
    355            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    356            
    357            /* Enable HSE */
    358            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    359           
    360            /* Wait till HSE is ready and if Time out is reached exit */
    361            do
    362            {
    363              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    364              StartUpCounter++;
    365            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    366          
    367            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    368            {
    369              HSEStatus = (uint32_t)0x01;
    370            }
    371            else
    372            {
    373              HSEStatus = (uint32_t)0x00;
    374            }
    375          
    376            if (HSEStatus == (uint32_t)0x01)
    377            {
    378              /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    379              RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    380              PWR->CR |= PWR_CR_VOS;
    381          
    382              /* HCLK = SYSCLK / 1*/
    383              RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
    384                
    385              /* PCLK2 = HCLK / 2*/
    386              RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    387              
    388              /* PCLK1 = HCLK / 4*/
    389              RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
    390          
    391              /* Configure the main PLL */
    392              RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
    393                             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
    394          
    395              /* Enable the main PLL */
    396              RCC->CR |= RCC_CR_PLLON;
    397          
    398              /* Wait till the main PLL is ready */
    399              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    400              {
    401              }
    402               
    403              /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    404              FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
    405          
    406              /* Select the main PLL as system clock source */
    407              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    408              RCC->CFGR |= RCC_CFGR_SW_PLL;
    409          
    410              /* Wait till the main PLL is used as system clock source */
    411              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
    412              {
    413              }
    414            }
    415            else
    416            { /* If HSE fails to start-up, the application will have wrong clock
    417                   configuration. User can add here some code to deal with this error */
    418            }
    419          
    420          }
    421            
    422          #ifdef DATA_IN_ExtSDRAM
    423          /**
    424            * @brief  Setup the external memory controller.
    425            *         Called in startup_stm32f429_439xx.s before jump to main.
    426            *         This function configures the external SDRAM mounted on STM32F429I DISCO board
    427            *         This SDRAM will be used as program data memory (including heap and stack).
    428            * @param  None
    429            * @retval None
    430            */
    431          void SystemInit_ExtMemCtl(void)
    432          {
    433            register uint32_t tmpreg = 0, timeout = 0xFFFF;
    434            register uint32_t index;
    435          
    436            /* Enable GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface 
    437                clock */
    438            RCC->AHB1ENR |= 0x000001FC;
    439            
    440            /* Connect PCx pins to FMC Alternate function */
    441            GPIOC->AFR[0]  = 0x0000000c;
    442            GPIOC->AFR[1]  = 0x00007700;
    443            /* Configure PCx pins in Alternate function mode */  
    444            GPIOC->MODER   = 0x00a00002;
    445            /* Configure PCx pins speed to 50 MHz */  
    446            GPIOC->OSPEEDR = 0x00a00002;
    447            /* Configure PCx pins Output type to push-pull */  
    448            GPIOC->OTYPER  = 0x00000000;
    449            /* No pull-up, pull-down for PCx pins */ 
    450            GPIOC->PUPDR   = 0x00500000;
    451            
    452            /* Connect PDx pins to FMC Alternate function */
    453            GPIOD->AFR[0]  = 0x000000CC;
    454            GPIOD->AFR[1]  = 0xCC000CCC;
    455            /* Configure PDx pins in Alternate function mode */  
    456            GPIOD->MODER   = 0xA02A000A;
    457            /* Configure PDx pins speed to 50 MHz */  
    458            GPIOD->OSPEEDR = 0xA02A000A;
    459            /* Configure PDx pins Output type to push-pull */  
    460            GPIOD->OTYPER  = 0x00000000;
    461            /* No pull-up, pull-down for PDx pins */ 
    462            GPIOD->PUPDR   = 0x00000000;
    463          
    464            /* Connect PEx pins to FMC Alternate function */
    465            GPIOE->AFR[0]  = 0xC00000CC;
    466            GPIOE->AFR[1]  = 0xCCCCCCCC;
    467            /* Configure PEx pins in Alternate function mode */ 
    468            GPIOE->MODER   = 0xAAAA800A;
    469            /* Configure PEx pins speed to 50 MHz */ 
    470            GPIOE->OSPEEDR = 0xAAAA800A;
    471            /* Configure PEx pins Output type to push-pull */  
    472            GPIOE->OTYPER  = 0x00000000;
    473            /* No pull-up, pull-down for PEx pins */ 
    474            GPIOE->PUPDR   = 0x00000000;
    475          
    476            /* Connect PFx pins to FMC Alternate function */
    477            GPIOF->AFR[0]  = 0xcccccccc;
    478            GPIOF->AFR[1]  = 0xcccccccc;
    479            /* Configure PFx pins in Alternate function mode */   
    480            GPIOF->MODER   = 0xAA800AAA;
    481            /* Configure PFx pins speed to 50 MHz */ 
    482            GPIOF->OSPEEDR = 0xAA800AAA;
    483            /* Configure PFx pins Output type to push-pull */  
    484            GPIOF->OTYPER  = 0x00000000;
    485            /* No pull-up, pull-down for PFx pins */ 
    486            GPIOF->PUPDR   = 0x00000000;
    487          
    488            /* Connect PGx pins to FMC Alternate function */
    489            GPIOG->AFR[0]  = 0xcccccccc;
    490            GPIOG->AFR[1]  = 0xcccccccc;
    491            /* Configure PGx pins in Alternate function mode */ 
    492            GPIOG->MODER   = 0xaaaaaaaa;
    493            /* Configure PGx pins speed to 50 MHz */ 
    494            GPIOG->OSPEEDR = 0xaaaaaaaa;
    495            /* Configure PGx pins Output type to push-pull */  
    496            GPIOG->OTYPER  = 0x00000000;
    497            /* No pull-up, pull-down for PGx pins */ 
    498            GPIOG->PUPDR   = 0x00000000;
    499            
    500            /* Connect PHx pins to FMC Alternate function */
    501            GPIOH->AFR[0]  = 0x00C0CC00;
    502            GPIOH->AFR[1]  = 0xCCCCCCCC;
    503            /* Configure PHx pins in Alternate function mode */ 
    504            GPIOH->MODER   = 0xAAAA08A0;
    505            /* Configure PHx pins speed to 50 MHz */ 
    506            GPIOH->OSPEEDR = 0xAAAA08A0;
    507            /* Configure PHx pins Output type to push-pull */  
    508            GPIOH->OTYPER  = 0x00000000;
    509            /* No pull-up, pull-down for PHx pins */ 
    510            GPIOH->PUPDR   = 0x00000000;
    511            
    512            /* Connect PIx pins to FMC Alternate function */
    513            GPIOI->AFR[0]  = 0xCCCCCCCC;
    514            GPIOI->AFR[1]  = 0x00000CC0;
    515            /* Configure PIx pins in Alternate function mode */ 
    516            GPIOI->MODER   = 0x0028AAAA;
    517            /* Configure PIx pins speed to 50 MHz */ 
    518            GPIOI->OSPEEDR = 0x0028AAAA;
    519            /* Configure PIx pins Output type to push-pull */  
    520            GPIOI->OTYPER  = 0x00000000;
    521            /* No pull-up, pull-down for PIx pins */ 
    522            GPIOI->PUPDR   = 0x00000000;
    523            
    524          /*-- FMC Configuration ------------------------------------------------------*/
    525            /* Enable the FMC interface clock */
    526            RCC->AHB3ENR |= 0x00000001;
    527            
    528            /* Configure and enable SDRAM bank1 */
    529            FMC_Bank5_6->SDCR[0] = 0x000029D0;
    530            FMC_Bank5_6->SDTR[0] = 0x01115351;      
    531            
    532            /* SDRAM initialization sequence */
    533            /* Clock enable command */
    534            FMC_Bank5_6->SDCMR = 0x00000011; 
    535            tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    536            while((tmpreg != 0) && (timeout-- > 0))
    537            {
    538              tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    539            }
    540          
    541            /* Delay */
    542            for (index = 0; index<1000; index++);
    543            
    544            /* PALL command */
    545            FMC_Bank5_6->SDCMR = 0x00000012;           
    546            timeout = 0xFFFF;
    547            while((tmpreg != 0) && (timeout-- > 0))
    548            {
    549              tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    550            }
    551            
    552            /* Auto refresh command */
    553            FMC_Bank5_6->SDCMR = 0x00000073;
    554            timeout = 0xFFFF;
    555            while((tmpreg != 0) && (timeout-- > 0))
    556            {
    557              tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    558            }
    559           
    560            /* MRD register program */
    561            FMC_Bank5_6->SDCMR = 0x00046014;
    562            timeout = 0xFFFF;
    563            while((tmpreg != 0) && (timeout-- > 0))
    564            {
    565              tmpreg = FMC_Bank5_6->SDSR & 0x00000020; 
    566            } 
    567            
    568            /* Set refresh count */
    569            tmpreg = FMC_Bank5_6->SDRTR;
    570            FMC_Bank5_6->SDRTR = (tmpreg | (0x0000027C<<1));
    571            
    572            /* Disable write protection */
    573            tmpreg = FMC_Bank5_6->SDCR[0]; 
    574            FMC_Bank5_6->SDCR[0] = (tmpreg & 0xFFFFFDFF);
    575          
    576          /*
    577            Bank1_SDRAM is configured as follow:
    578          
    579            FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay = 2;      
    580            FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 6;  
    581            FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime = 4;        
    582            FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay = 6;         
    583            FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime = 2;      
    584            FMC_SDRAMTimingInitStructure.FMC_RPDelay = 2;                
    585            FMC_SDRAMTimingInitStructure.FMC_RCDDelay = 2;               
    586          
    587            FMC_SDRAMInitStructure.FMC_Bank = SDRAM_BANK;
    588            FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
    589            FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_11b;
    590            FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
    591            FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
    592            FMC_SDRAMInitStructure.FMC_CASLatency = FMC_CAS_Latency_3; 
    593            FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
    594            FMC_SDRAMInitStructure.FMC_SDClockPeriod = FMC_SDClock_Period_2;
    595            FMC_SDRAMInitStructure.FMC_ReadBurst = FMC_Read_Burst_disable;
    596            FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
    597            FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
    598          */
    599          
    600          }
    601          #endif /* DATA_IN_ExtSDRAM */
    602          
    603          
    604          /**
    605            * @}
    606            */
    607          
    608          /**
    609            * @}
    610            */
    611            
    612          /**
    613            * @}
    614            */    
    615          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SystemCoreClockUpdate
       8   SystemInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      20  SystemCoreClock
          AHBPrescTable
      94  SystemCoreClockUpdate
     208  SystemInit

 
  20 bytes in section .data
 342 bytes in section .text
 
 342 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
